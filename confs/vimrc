""""""""""""""""""
"
" Util
"
""""""""""""""""""
set t_Co=256
colorscheme desert
syntax on
filetype on
filetype plugin indent on
set nu    " show line number`
set fileencoding=utf-8
set fileencodings=ucs-bom,utf-8,cp936,gb18030,big5,euc-jp,euc-kr,latin1
set shiftwidth=4
set tabstop=4
set softtabstop=4
set shiftwidth=4
set backspace=indent,eol,start  " set backup delete is tab type
set expandtab
set smartindent
set showmatch   " auto show { } when select one of two
set matchtime=2
set incsearch   " hilight hit word when type in search key work
set hlsearch    " hilight all matched word when searching(after type enter)
set nobackup
set smartcase
set nowrap
set noswapfile
set nocompatible
set completeopt=longest,menu
set shell=bash\ --login
autocmd FileType c,ch,cpp,java setlocal cindent
autocmd FileType python set omnifunc=pythoncomplete#Complete
autocmd FileType c,ch,cpp,python set cc=80
autocmd FileType text,markdown set wrap

let g:mapleader=","
nnoremap <leader>a ggVG
nnoremap <leader>w :w<CR>
inoremap <leader>w <ESC>:w<CR>
nnoremap <leader>q :q<CR>

" window switch
nnoremap <leader>k <C-W>k
nnoremap <leader>j <C-W>j
nnoremap <leader>h <C-W>h
nnoremap <leader>l <C-W>l
nnoremap <leader>J <C-W>b
nnoremap <leader>K <C-W>t

" window resize
nnoremap <leader>vm <C-W>_
nnoremap <leader>sm <C-W>\|
nnoremap <leader>m <C-W>\|<C-W>_
nnoremap <leader>nm <C-W>=

" window move
nnoremap <leader>tj <C-W>J
nnoremap <leader>tk <C-W>K
nnoremap <leader>th <C-W>H
nnoremap <leader>tl <C-W>L

" tab switch
nnoremap <silent><C-H> :tabp<CR>
nnoremap <silent><C-L> :tabn<CR>
nnoremap <silent><leader>ttl :call TableMove('forward')<CR>
nnoremap <silent><leader>tth :call TableMove('backward')<CR>

" open new file
noremap <leader>oo :new
noremap <leader>os :split
noremap <leader>ov :vnew
noremap <leader>ot :tabnew

" next/last page
nnoremap <C-J> <C-F>
nnoremap <C-K> <C-B>

" link jump
nmap <leader>g <C-]>
nmap <leader>b <C-O>
nnoremap <leader>p <C-I>

" line move
nmap <leader>st 0
nmap <leader>en $

" Comments
noremap  <silent><leader>cc :call CommentLine()<CR>
vnoremap <silent><leader>cc :call RangeCommentLine()<CR>
noremap  <silent><leader>cx :call UnCommentLine()<CR>
vnoremap <silent><leader>cx :call RangeUnCommentLine()<CR>

" htlf-auto paste mode
nnoremap <leader>x :set paste<CR>i
autocmd InsertLeave * :set nopaste

" format json
nnoremap <leader>fj :%!python -m json.tool<CR>

" search show result in single window
nmap <Leader>/ :exec 'lvimgrep /' . input('>', expand('<cword>')) . '/j % <bar> lopen'<CR>

" detect os type [linux, darwin, win]
if filereadable(expand("~/.vim_ext"))
    source ~/.vim_ext
endif
if (!exists("g:ostype"))
    let g:ostype="linux"
endif

if has("gui_running")
	let g:isGUI = 1
else
	let g:isGUI = 0
endif

if g:isGUI
    set go=c
end

if g:isGUI && g:ostype == "win"
    let g:windowAlpha=255
    noremap <silent><F9> :call SetAlpha("down")<CR>
    noremap <silent><F10> :call SetAlpha("up")<CR>
    nnoremap <silent><F11> :call libcallnr("f", "ToggleFullScreen", 0)<CR>
    inoremap <silent><F11> <ESC>:call libcallnr("f", "ToggleFullScreen", 0)<CR>
endif

" auto load vimrc  config
if g:ostype == "win"
    nnoremap <leader>ss :source $HOME/_vimrc<CR>
    autocmd! bufwritepost *vimrc :source $HOME/_vimrc
    nnoremap <leader>erc :new $HOME/_vimrc<cr>
else
    nnoremap <leader>ss :source ~/.vimrc<CR>
    autocmd! bufwritepost *vimrc :source ~/.vimrc
    nnoremap <leader>erc :new ~/.vimrc<cr>
endif

" system clipboard
if g:ostype == "darwin"
    vmap <leader>y :w !pbcopy<cr><cr>
    nmap <leader>p :set paste<CR>:r !pbpaste<CR>:set nopaste<CR>
    imap <leader>p <Esc>:set paste<CR>:r !pbpaste<CR>:set nopaste<CR>
endif

function! SetAlpha(alpha)
    if 'up' == a:alpha
        let g:windowAlpha += 10
        if 255 < g:windowAlpha
            let g:windowAlpha = 255
        endif
    elseif 'down' == a:alpha
        let g:windowAlpha -= 10
        if 0 > g:windowAlpha
            let g:windowAlpha = 0
        endif
    endif

    call libcallnr("f", "SetAlpha", g:windowAlpha)
endfunction

" highlight space at the end of line
function! WarningEOL()
    if &ft == 'qf'
        return
    endif

    match whitespaceEOL /\s\+$/

    if &ft == 'text' || &ft == 'markdown'
        return
    endif

    syntax match ColorColumn /\%>80v.\+/
endfunction
highlight whitespaceEOL ctermbg=1 guibg=red
highlight ColorColumn ctermbg=1 guibg=red
autocmd bufwinenter * call WarningEOL()

"d p u y

""""""""""""""""""
"
" Plugins
"
""""""""""""""""""
" NERDTree
nnoremap <leader>tr :NERDTree<CR>
let NERDTreeIgnore=['\.pyc$', '\~$', '\.sql']
let NERDTreeDirArrows = 0

" Tag List
set autochdir
"let Tlist_Ctag_Cmd="/usr/bin/ctags"
let Tlist_Show_One_File = 1
let Tlist_Exit_OnlyWindow = 1
let Tlist_Use_Right_Window = 1
nnoremap <leader>ta :Tlist<CR>

" TagBar
nmap <F8> :TagbarToggle<CR>

" pydictionary
if g:ostype == "win"
    let g:pydiction_location = '$HOME\vimfiles\complete-dict'
else
    let g:pydiction_location = '~/.vim/complete-dict'
endif

" flake8
autocmd FileType python map <buffer> <F7> :call Flake8()<CR>
let g:flake8_ignore="F403"

" buffergator
nnoremap <silent> <leader>d :BuffergatorToggle<CR>
let g:buffergator_suppress_keymaps = 1
let g:buffergator_viewport_split_policy = "B"

" auto run
nnoremap <silent><F5> :call AutoRun()<CR>
function! AutoRun()
    if 'python' == &filetype
        exe "!python %"
    elseif 'php' == &filetype
        exe "!php %"
    elseif 'sh' == &filetype
        exe "!bash %"
    elseif 'javascript' == &filetype
        exe '!node %'
    endif
endfunction

" Table
function! TableMove(direction)
    let tableCount = tabpagenr('$')
    let tableIndex = tabpagenr()

    if 'forward' == a:direction
        let tableIndex += 1
    else
        let tableIndex -= 2
    endif

    if tableIndex > tableCount
        let tableIndex = 0
    endif
    if tableIndex < 0
        let tableIndex = tableCount
    endif

    execute 'tabm '.tableIndex
endfunction

" Python complete
inoremap <Tab> <C-R>=TabComplete()<CR>
function! TabComplete()
    if searchpos('[_a-zA-Z0-9.(]\%#', 'nb') != [0, 0] 
        if !pumvisible()
            return "\<C-X>\<C-O>"
        else
            return "\<C-N>"
        endif
    endif
    return "\<Tab>"
endfunction

" nerd_tree
autocmd StdinReadPre * let s:std_in=1
autocmd VimEnter * if argc() == 0 && !exists("s:std_in") | NERDTree | endif
